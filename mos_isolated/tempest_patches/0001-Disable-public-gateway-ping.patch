From 9f32cf35c41b556ccb52e2c3efc0659777abac1c Mon Sep 17 00:00:00 2001
From: Dmitry Kalashnik <dkalashnik@mirantis.com>
Date: Sun, 20 Sep 2015 23:15:11 +0300
Subject: [PATCH] Disable public gateway ping

---
 tempest/scenario/test_network_basic_ops.py | 36 +++++++++++++++++-------------
 1 file changed, 20 insertions(+), 16 deletions(-)

diff --git a/tempest/scenario/test_network_basic_ops.py b/tempest/scenario/test_network_basic_ops.py
index 8ca5e72..f9a0b94 100644
--- a/tempest/scenario/test_network_basic_ops.py
+++ b/tempest/scenario/test_network_basic_ops.py
@@ -316,22 +316,26 @@ class TestNetworkBasicOps(manager.NetworkScenarioTest):
         ping public network default gateway to imply external connectivity
 
         """
-        if not CONF.network.public_network_id:
-            msg = 'public network not defined.'
-            LOG.info(msg)
-            return
-
-        # We ping the external IP from the instance using its floating IP
-        # which is always IPv4, so we must only test connectivity to
-        # external IPv4 IPs if the external network is dualstack.
-        v4_subnets = [s for s in self._list_subnets(
-            network_id=CONF.network.public_network_id) if s['ip_version'] == 4]
-        self.assertEqual(1, len(v4_subnets),
-                         "Found %d IPv4 subnets" % len(v4_subnets))
-
-        external_ips = [v4_subnets[0]['gateway_ip']]
-        self._check_server_connectivity(self.floating_ip_tuple.floating_ip,
-                                        external_ips)
+        # NOTE(dkalashnik): Disable public gateway ping due to it
+        # unavailability on true isolated envs
+
+        # if not CONF.network.public_network_id:
+        #     msg = 'public network not defined.'
+        #     LOG.info(msg)
+        #     return
+        #
+        # # We ping the external IP from the instance using its floating IP
+        # # which is always IPv4, so we must only test connectivity to
+        # # external IPv4 IPs if the external network is dualstack.
+        # v4_subnets = [s for s in self._list_subnets(
+        #     network_id=CONF.network.public_network_id) if s['ip_version'] == 4]
+        # self.assertEqual(1, len(v4_subnets),
+        #                  "Found %d IPv4 subnets" % len(v4_subnets))
+        #
+        # external_ips = [v4_subnets[0]['gateway_ip']]
+        # self._check_server_connectivity(self.floating_ip_tuple.floating_ip,
+        #                                 external_ips)
+        return
 
     def _check_server_connectivity(self, floating_ip, address_list,
                                    should_connect=True):
-- 
2.3.8 (Apple Git-58)

