From 2d8c9ccf2bf9ba8e1fc910f36c175b7cccc9b090 Mon Sep 17 00:00:00 2001
From: Dmitry Kalashnik <dkalashnik@mirantis.com>
Date: Sun, 20 Sep 2015 23:20:40 +0300
Subject: [PATCH] Disable tests with remote images

---
 tempest/api/image/v1/test_images.py | 80 ++++++++++++++++++-------------------
 1 file changed, 40 insertions(+), 40 deletions(-)

diff --git a/tempest/api/image/v1/test_images.py b/tempest/api/image/v1/test_images.py
index d4dbfcd..309af07 100644
--- a/tempest/api/image/v1/test_images.py
+++ b/tempest/api/image/v1/test_images.py
@@ -49,35 +49,35 @@ class CreateRegisterImagesTest(base.BaseV1ImageTest):
         self.assertIn('size', body)
         self.assertEqual(1024, body.get('size'))
 
-    @test.idempotent_id('69da74d9-68a9-404b-9664-ff7164ccb0f5')
-    def test_register_remote_image(self):
-        # Register a new remote image
-        body = self.create_image(name='New Remote Image',
-                                 container_format='bare',
-                                 disk_format='raw', is_public=False,
-                                 location=CONF.image.http_image,
-                                 properties={'key1': 'value1',
-                                             'key2': 'value2'})
-        self.assertIn('id', body)
-        self.assertEqual('New Remote Image', body.get('name'))
-        self.assertFalse(body.get('is_public'))
-        self.assertEqual('active', body.get('status'))
-        properties = body.get('properties')
-        self.assertEqual(properties['key1'], 'value1')
-        self.assertEqual(properties['key2'], 'value2')
-
-    @test.idempotent_id('6d0e13a7-515b-460c-b91f-9f4793f09816')
-    def test_register_http_image(self):
-        body = self.create_image(name='New Http Image',
-                                 container_format='bare',
-                                 disk_format='raw', is_public=False,
-                                 copy_from=CONF.image.http_image)
-        self.assertIn('id', body)
-        image_id = body.get('id')
-        self.assertEqual('New Http Image', body.get('name'))
-        self.assertFalse(body.get('is_public'))
-        self.client.wait_for_image_status(image_id, 'active')
-        self.client.show_image(image_id)
+    # @test.idempotent_id('69da74d9-68a9-404b-9664-ff7164ccb0f5')
+    # def test_register_remote_image(self):
+    #     # Register a new remote image
+    #     body = self.create_image(name='New Remote Image',
+    #                              container_format='bare',
+    #                              disk_format='raw', is_public=False,
+    #                              location=CONF.image.http_image,
+    #                              properties={'key1': 'value1',
+    #                                          'key2': 'value2'})
+    #     self.assertIn('id', body)
+    #     self.assertEqual('New Remote Image', body.get('name'))
+    #     self.assertFalse(body.get('is_public'))
+    #     self.assertEqual('active', body.get('status'))
+    #     properties = body.get('properties')
+    #     self.assertEqual(properties['key1'], 'value1')
+    #     self.assertEqual(properties['key2'], 'value2')
+    #
+    # @test.idempotent_id('6d0e13a7-515b-460c-b91f-9f4793f09816')
+    # def test_register_http_image(self):
+    #     body = self.create_image(name='New Http Image',
+    #                              container_format='bare',
+    #                              disk_format='raw', is_public=False,
+    #                              copy_from=CONF.image.http_image)
+    #     self.assertIn('id', body)
+    #     image_id = body.get('id')
+    #     self.assertEqual('New Http Image', body.get('name'))
+    #     self.assertFalse(body.get('is_public'))
+    #     self.client.wait_for_image_status(image_id, 'active')
+    #     self.client.show_image(image_id)
 
     @test.idempotent_id('05b19d55-140c-40d0-b36b-fafd774d421b')
     def test_register_image_with_min_ram(self):
@@ -110,24 +110,24 @@ class ListImagesTest(base.BaseV1ImageTest):
         super(ListImagesTest, cls).resource_setup()
         # We add a few images here to test the listing functionality of
         # the images API
-        img1 = cls._create_remote_image('one', 'bare', 'raw')
-        img2 = cls._create_remote_image('two', 'ami', 'ami')
-        img3 = cls._create_remote_image('dup', 'bare', 'raw')
-        img4 = cls._create_remote_image('dup', 'bare', 'raw')
+        # img1 = cls._create_remote_image('one', 'bare', 'raw')
+        # img2 = cls._create_remote_image('two', 'ami', 'ami')
+        # img3 = cls._create_remote_image('dup', 'bare', 'raw')
+        # img4 = cls._create_remote_image('dup', 'bare', 'raw')
         img5 = cls._create_standard_image('1', 'ami', 'ami', 42)
         img6 = cls._create_standard_image('2', 'ami', 'ami', 142)
-        img7 = cls._create_standard_image('33', 'bare', 'raw', 142)
-        img8 = cls._create_standard_image('33', 'bare', 'raw', 142)
+        img7 = cls._create_standard_image('dup', 'bare', 'raw', 142)
+        img8 = cls._create_standard_image('dup', 'bare', 'raw', 142)
         cls.created_set = set(cls.created_images)
         # 5x bare, 3x ami
-        cls.bare_set = set((img1, img3, img4, img7, img8))
-        cls.ami_set = set((img2, img5, img6))
+        cls.bare_set = set((img7, img8))
+        cls.ami_set = set((img5, img6))
         # 1x with size 42
         cls.size42_set = set((img5,))
         # 3x with size 142
         cls.size142_set = set((img6, img7, img8,))
         # dup named
-        cls.dup_set = set((img3, img4))
+        cls.dup_set = set((img7, img8))
 
     @classmethod
     def _create_remote_image(cls, name, container_format, disk_format):
@@ -224,10 +224,10 @@ class ListImagesTest(base.BaseV1ImageTest):
     def test_index_name(self):
         images_list = self.client.list_images(
             detail=True,
-            name='New Remote Image dup')['images']
+            name='New Standard Image dup')['images']
         result_set = set(map(lambda x: x['id'], images_list))
         for image in images_list:
-            self.assertEqual(image['name'], 'New Remote Image dup')
+            self.assertEqual(image['name'], 'New Standard Image dup')
         self.assertTrue(self.dup_set <= result_set)
         self.assertFalse(self.created_set - self.dup_set <= result_set)
 
-- 
2.3.8 (Apple Git-58)

